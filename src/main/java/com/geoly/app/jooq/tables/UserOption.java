/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.UserOptionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOption extends TableImpl<UserOptionRecord> {

    private static final long serialVersionUID = 13211032;

    /**
     * The reference instance of <code>geoly.USER_OPTION</code>
     */
    public static final UserOption USER_OPTION = new UserOption();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserOptionRecord> getRecordType() {
        return UserOptionRecord.class;
    }

    /**
     * The column <code>geoly.USER_OPTION.ID</code>.
     */
    public final TableField<UserOptionRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.USER_OPTION.DARK_MODE</code>.
     */
    public final TableField<UserOptionRecord, Byte> DARK_MODE = createField("DARK_MODE", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>geoly.USER_OPTION.MAP_THEME</code>.
     */
    public final TableField<UserOptionRecord, Integer> MAP_THEME = createField("MAP_THEME", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>geoly.USER_OPTION.PRIVATE_PROFILE</code>.
     */
    public final TableField<UserOptionRecord, Byte> PRIVATE_PROFILE = createField("PRIVATE_PROFILE", org.jooq.impl.SQLDataType.TINYINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>geoly.USER_OPTION.LANGUAGE_ID</code>.
     */
    public final TableField<UserOptionRecord, Integer> LANGUAGE_ID = createField("LANGUAGE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geoly.USER_OPTION.USER_ID</code>.
     */
    public final TableField<UserOptionRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.USER_OPTION</code> table reference
     */
    public UserOption() {
        this(DSL.name("USER_OPTION"), null);
    }

    /**
     * Create an aliased <code>geoly.USER_OPTION</code> table reference
     */
    public UserOption(String alias) {
        this(DSL.name(alias), USER_OPTION);
    }

    /**
     * Create an aliased <code>geoly.USER_OPTION</code> table reference
     */
    public UserOption(Name alias) {
        this(alias, USER_OPTION);
    }

    private UserOption(Name alias, Table<UserOptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserOption(Name alias, Table<UserOptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserOption(Table<O> child, ForeignKey<O, UserOptionRecord> key) {
        super(child, key, USER_OPTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK2P5OTBGWV6TGF70068RSW2JNH_INDEX_D, Indexes.FK300INJW6I3MCW7FVRWO19P7Q5_INDEX_D, Indexes.PRIMARY_KEY_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserOptionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserOptionRecord>> getKeys() {
        return Arrays.<UniqueKey<UserOptionRecord>>asList(Keys.CONSTRAINT_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserOptionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserOptionRecord, ?>>asList(Keys.FK300INJW6I3MCW7FVRWO19P7Q5, Keys.FK2P5OTBGWV6TGF70068RSW2JNH);
    }

    public Language language() {
        return new Language(this, Keys.FK300INJW6I3MCW7FVRWO19P7Q5);
    }

    public User user() {
        return new User(this, Keys.FK2P5OTBGWV6TGF70068RSW2JNH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserOption as(String alias) {
        return new UserOption(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserOption as(Name alias) {
        return new UserOption(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOption rename(String name) {
        return new UserOption(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOption rename(Name name) {
        return new UserOption(name, null);
    }
}
