/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.UserQuestRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserQuest extends TableImpl<UserQuestRecord> {

    private static final long serialVersionUID = -1950039075;

    /**
     * The reference instance of <code>geoly.USER_QUEST</code>
     */
    public static final UserQuest USER_QUEST = new UserQuest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserQuestRecord> getRecordType() {
        return UserQuestRecord.class;
    }

    /**
     * The column <code>geoly.USER_QUEST.ID</code>.
     */
    public final TableField<UserQuestRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.USER_QUEST.ADVISE_USED</code>.
     */
    public final TableField<UserQuestRecord, Byte> ADVISE_USED = createField("ADVISE_USED", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>geoly.USER_QUEST.CREATED_AT</code>.
     */
    public final TableField<UserQuestRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>geoly.USER_QUEST.STATUS</code>.
     */
    public final TableField<UserQuestRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>geoly.USER_QUEST.UPDATED_AT</code>.
     */
    public final TableField<UserQuestRecord, Timestamp> UPDATED_AT = createField("UPDATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>geoly.USER_QUEST.STAGE_ID</code>.
     */
    public final TableField<UserQuestRecord, Integer> STAGE_ID = createField("STAGE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geoly.USER_QUEST.USER_ID</code>.
     */
    public final TableField<UserQuestRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.USER_QUEST</code> table reference
     */
    public UserQuest() {
        this(DSL.name("USER_QUEST"), null);
    }

    /**
     * Create an aliased <code>geoly.USER_QUEST</code> table reference
     */
    public UserQuest(String alias) {
        this(DSL.name(alias), USER_QUEST);
    }

    /**
     * Create an aliased <code>geoly.USER_QUEST</code> table reference
     */
    public UserQuest(Name alias) {
        this(alias, USER_QUEST);
    }

    private UserQuest(Name alias, Table<UserQuestRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserQuest(Name alias, Table<UserQuestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserQuest(Table<O> child, ForeignKey<O, UserQuestRecord> key) {
        super(child, key, USER_QUEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK977NSU6QESBJIQNOJ44GN7880_INDEX_C, Indexes.FKIBRQXFYCOQIS0E2L8A5SWRCR2_INDEX_C, Indexes.PRIMARY_KEY_C6);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserQuestRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C6;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserQuestRecord>> getKeys() {
        return Arrays.<UniqueKey<UserQuestRecord>>asList(Keys.CONSTRAINT_C6);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserQuestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserQuestRecord, ?>>asList(Keys.FK977NSU6QESBJIQNOJ44GN7880, Keys.FKIBRQXFYCOQIS0E2L8A5SWRCR2);
    }

    public Stage stage() {
        return new Stage(this, Keys.FK977NSU6QESBJIQNOJ44GN7880);
    }

    public User user() {
        return new User(this, Keys.FKIBRQXFYCOQIS0E2L8A5SWRCR2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserQuest as(String alias) {
        return new UserQuest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserQuest as(Name alias) {
        return new UserQuest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserQuest rename(String name) {
        return new UserQuest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserQuest rename(Name name) {
        return new UserQuest(name, null);
    }
}
