/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.UserBadgeRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserBadge extends TableImpl<UserBadgeRecord> {

    private static final long serialVersionUID = 806402066;

    /**
     * The reference instance of <code>geoly.USER_BADGE</code>
     */
    public static final UserBadge USER_BADGE = new UserBadge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserBadgeRecord> getRecordType() {
        return UserBadgeRecord.class;
    }

    /**
     * The column <code>geoly.USER_BADGE.ID</code>.
     */
    public final TableField<UserBadgeRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.USER_BADGE.CREATED_AT</code>.
     */
    public final TableField<UserBadgeRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>geoly.USER_BADGE.BADGE_ID</code>.
     */
    public final TableField<UserBadgeRecord, Integer> BADGE_ID = createField("BADGE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geoly.USER_BADGE.USER_ID</code>.
     */
    public final TableField<UserBadgeRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.USER_BADGE</code> table reference
     */
    public UserBadge() {
        this(DSL.name("USER_BADGE"), null);
    }

    /**
     * Create an aliased <code>geoly.USER_BADGE</code> table reference
     */
    public UserBadge(String alias) {
        this(DSL.name(alias), USER_BADGE);
    }

    /**
     * Create an aliased <code>geoly.USER_BADGE</code> table reference
     */
    public UserBadge(Name alias) {
        this(alias, USER_BADGE);
    }

    private UserBadge(Name alias, Table<UserBadgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserBadge(Name alias, Table<UserBadgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserBadge(Table<O> child, ForeignKey<O, UserBadgeRecord> key) {
        super(child, key, USER_BADGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK4ON6HHXOAHTILT08QQX5H23AC_INDEX_C, Indexes.FKGEX61AGBF44TMRPANNFIIAFSN_INDEX_C, Indexes.PRIMARY_KEY_C5, Indexes.UKAIMDKV0GJ056642Q3O85CMGHE_INDEX_C);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserBadgeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserBadgeRecord>> getKeys() {
        return Arrays.<UniqueKey<UserBadgeRecord>>asList(Keys.CONSTRAINT_C5, Keys.UKAIMDKV0GJ056642Q3O85CMGHE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UserBadgeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserBadgeRecord, ?>>asList(Keys.FK4ON6HHXOAHTILT08QQX5H23AC, Keys.FKGEX61AGBF44TMRPANNFIIAFSN);
    }

    public Badge badge() {
        return new Badge(this, Keys.FK4ON6HHXOAHTILT08QQX5H23AC);
    }

    public User user() {
        return new User(this, Keys.FKGEX61AGBF44TMRPANNFIIAFSN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserBadge as(String alias) {
        return new UserBadge(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserBadge as(Name alias) {
        return new UserBadge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserBadge rename(String name) {
        return new UserBadge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserBadge rename(Name name) {
        return new UserBadge(name, null);
    }
}
