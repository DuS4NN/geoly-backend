/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.PartyInviteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PartyInvite extends TableImpl<PartyInviteRecord> {

    private static final long serialVersionUID = -511231417;

    /**
     * The reference instance of <code>geoly.PARTY_INVITE</code>
     */
    public static final PartyInvite PARTY_INVITE = new PartyInvite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyInviteRecord> getRecordType() {
        return PartyInviteRecord.class;
    }

    /**
     * The column <code>geoly.PARTY_INVITE.ID</code>.
     */
    public final TableField<PartyInviteRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.PARTY_INVITE.CREATED_AT</code>.
     */
    public final TableField<PartyInviteRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>geoly.PARTY_INVITE.SEEN</code>.
     */
    public final TableField<PartyInviteRecord, Byte> SEEN = createField("SEEN", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>geoly.PARTY_INVITE.STATUS</code>.
     */
    public final TableField<PartyInviteRecord, String> STATUS = createField("STATUS", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>geoly.PARTY_INVITE.PARTY_ID</code>.
     */
    public final TableField<PartyInviteRecord, Integer> PARTY_ID = createField("PARTY_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geoly.PARTY_INVITE.USER_ID</code>.
     */
    public final TableField<PartyInviteRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.PARTY_INVITE</code> table reference
     */
    public PartyInvite() {
        this(DSL.name("PARTY_INVITE"), null);
    }

    /**
     * Create an aliased <code>geoly.PARTY_INVITE</code> table reference
     */
    public PartyInvite(String alias) {
        this(DSL.name(alias), PARTY_INVITE);
    }

    /**
     * Create an aliased <code>geoly.PARTY_INVITE</code> table reference
     */
    public PartyInvite(Name alias) {
        this(alias, PARTY_INVITE);
    }

    private PartyInvite(Name alias, Table<PartyInviteRecord> aliased) {
        this(alias, aliased, null);
    }

    private PartyInvite(Name alias, Table<PartyInviteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PartyInvite(Table<O> child, ForeignKey<O, PartyInviteRecord> key) {
        super(child, key, PARTY_INVITE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK5N5BG86WU1LEDOPG6IN964H6J_INDEX_5, Indexes.FKG0D7MD7NQV6Y8UNXO7TFR722F_INDEX_5, Indexes.PRIMARY_KEY_5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartyInviteRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartyInviteRecord>> getKeys() {
        return Arrays.<UniqueKey<PartyInviteRecord>>asList(Keys.CONSTRAINT_5);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PartyInviteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PartyInviteRecord, ?>>asList(Keys.FKG0D7MD7NQV6Y8UNXO7TFR722F, Keys.FK5N5BG86WU1LEDOPG6IN964H6J);
    }

    public Party party() {
        return new Party(this, Keys.FKG0D7MD7NQV6Y8UNXO7TFR722F);
    }

    public User user() {
        return new User(this, Keys.FK5N5BG86WU1LEDOPG6IN964H6J);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PartyInvite as(String alias) {
        return new PartyInvite(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PartyInvite as(Name alias) {
        return new PartyInvite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyInvite rename(String name) {
        return new PartyInvite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PartyInvite rename(Name name) {
        return new PartyInvite(name, null);
    }
}
