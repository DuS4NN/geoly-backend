/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.StageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stage extends TableImpl<StageRecord> {

    private static final long serialVersionUID = 1110279238;

    /**
     * The reference instance of <code>geoly.STAGE</code>
     */
    public static final Stage STAGE = new Stage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StageRecord> getRecordType() {
        return StageRecord.class;
    }

    /**
     * The column <code>geoly.STAGE.ID</code>.
     */
    public final TableField<StageRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.STAGE.ADVISE</code>.
     */
    public final TableField<StageRecord, String> ADVISE = createField("ADVISE", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>geoly.STAGE.ANSWER</code>.
     */
    public final TableField<StageRecord, String> ANSWER = createField("ANSWER", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>geoly.STAGE.ANSWERS_LIST</code>.
     */
    public final TableField<StageRecord, String> ANSWERS_LIST = createField("ANSWERS_LIST", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>geoly.STAGE.LATITUDE</code>.
     */
    public final TableField<StageRecord, Double> LATITUDE = createField("LATITUDE", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>geoly.STAGE.LONGITUDE</code>.
     */
    public final TableField<StageRecord, Double> LONGITUDE = createField("LONGITUDE", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>geoly.STAGE.NOTE</code>.
     */
    public final TableField<StageRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>geoly.STAGE.QR_CODE_URL</code>.
     */
    public final TableField<StageRecord, String> QR_CODE_URL = createField("QR_CODE_URL", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>geoly.STAGE.QUESTION</code>.
     */
    public final TableField<StageRecord, String> QUESTION = createField("QUESTION", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>geoly.STAGE.TYPE</code>.
     */
    public final TableField<StageRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>geoly.STAGE.QUEST_ID</code>.
     */
    public final TableField<StageRecord, Integer> QUEST_ID = createField("QUEST_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.STAGE</code> table reference
     */
    public Stage() {
        this(DSL.name("STAGE"), null);
    }

    /**
     * Create an aliased <code>geoly.STAGE</code> table reference
     */
    public Stage(String alias) {
        this(DSL.name(alias), STAGE);
    }

    /**
     * Create an aliased <code>geoly.STAGE</code> table reference
     */
    public Stage(Name alias) {
        this(alias, STAGE);
    }

    private Stage(Name alias, Table<StageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stage(Name alias, Table<StageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Stage(Table<O> child, ForeignKey<O, StageRecord> key) {
        super(child, key, STAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKMUJKS4H5F77VK9X2HH1L4YPVG_INDEX_4, Indexes.PRIMARY_KEY_4B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StageRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StageRecord>> getKeys() {
        return Arrays.<UniqueKey<StageRecord>>asList(Keys.CONSTRAINT_4B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StageRecord, ?>>asList(Keys.FKMUJKS4H5F77VK9X2HH1L4YPVG);
    }

    public Quest quest() {
        return new Quest(this, Keys.FKMUJKS4H5F77VK9X2HH1L4YPVG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stage as(String alias) {
        return new Stage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stage as(Name alias) {
        return new Stage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(String name) {
        return new Stage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(Name name) {
        return new Stage(name, null);
    }
}
