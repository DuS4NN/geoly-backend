/*
 * This file is generated by jOOQ.
 */
package com.geoly.app.jooq.tables;


import com.geoly.app.jooq.Geoly;
import com.geoly.app.jooq.Indexes;
import com.geoly.app.jooq.Keys;
import com.geoly.app.jooq.tables.records.PartyRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Party extends TableImpl<PartyRecord> {

    private static final long serialVersionUID = -111629409;

    /**
     * The reference instance of <code>geoly.PARTY</code>
     */
    public static final Party PARTY = new Party();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PartyRecord> getRecordType() {
        return PartyRecord.class;
    }

    /**
     * The column <code>geoly.PARTY.ID</code>.
     */
    public final TableField<PartyRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>geoly.PARTY.CREATED_AT</code>.
     */
    public final TableField<PartyRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>geoly.PARTY.NAME</code>.
     */
    public final TableField<PartyRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>geoly.PARTY.USER_ID</code>.
     */
    public final TableField<PartyRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>geoly.PARTY</code> table reference
     */
    public Party() {
        this(DSL.name("PARTY"), null);
    }

    /**
     * Create an aliased <code>geoly.PARTY</code> table reference
     */
    public Party(String alias) {
        this(DSL.name(alias), PARTY);
    }

    /**
     * Create an aliased <code>geoly.PARTY</code> table reference
     */
    public Party(Name alias) {
        this(alias, PARTY);
    }

    private Party(Name alias, Table<PartyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Party(Name alias, Table<PartyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Party(Table<O> child, ForeignKey<O, PartyRecord> key) {
        super(child, key, PARTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Geoly.GEOLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FKQFWC76LQ1GWTEVTA6KHS862RK_INDEX_4, Indexes.PRIMARY_KEY_48);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PartyRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_48;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PartyRecord>> getKeys() {
        return Arrays.<UniqueKey<PartyRecord>>asList(Keys.CONSTRAINT_48);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PartyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PartyRecord, ?>>asList(Keys.FKQFWC76LQ1GWTEVTA6KHS862RK);
    }

    public User user() {
        return new User(this, Keys.FKQFWC76LQ1GWTEVTA6KHS862RK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Party as(String alias) {
        return new Party(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Party as(Name alias) {
        return new Party(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(String name) {
        return new Party(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Party rename(Name name) {
        return new Party(name, null);
    }
}
